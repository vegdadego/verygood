import 'package:freezed_annotation/freezed_annotation.dart';
import '../../domain/entities/task.dart';

part 'task_model.freezed.dart';
part 'task_model.g.dart';

/// Data model representing a Task with JSON serialization.
///
/// This model extends the domain entity and adds serialization capabilities
/// for JSON conversion. It acts as a bridge between the domain layer
/// (business logic) and the data layer (API/DB).
///
/// **Uses Freezed for:**
/// - Immutability (all properties are final)
/// - Type-safe unions
/// - Code generation (copyWith, ==, hashCode)
/// - Pattern matching
///
/// **Uses json_serializable for:**
/// - Automatic JSON serialization
/// - fromJson/toJson methods
/// - Type safety in JSON conversion
@Freezed(toJson: true, fromJson: true)
class TaskModel with _$TaskModel {
  const TaskModel._();

  /// Factory constructor for creating TaskModel instances
  ///
  /// All fields are required and must be non-null.
  const factory TaskModel({
    required String id,
    required String title,
    required String description,
    required bool completed,
  }) = _TaskModel;

  /// Create TaskModel from JSON map
  ///
  /// Automatically generated by json_serializable
  factory TaskModel.fromJson(Map<String, dynamic> json) =>
      _$TaskModelFromJson(json);

  /// Convert to domain entity
  ///
  /// This method maps the data model to the domain entity,
  /// ensuring clean separation between data and domain layers.
  Task toEntity() {
    return Task(
      id: id,
      title: title,
      description: description,
      completed: completed,
    );
  }

  /// Create TaskModel from domain entity
  ///
  /// This method is useful when converting domain entities
  /// back to data models for API requests.
  factory TaskModel.fromEntity(Task task) {
    return TaskModel(
      id: task.id,
      title: task.title,
      description: task.description,
      completed: task.completed,
    );
  }
}
